# NumPy Documentation

## Introduction

NumPy is a fundamental package for scientific computing in Python. It provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays.

## Installation

To install NumPy, use:

```sh
pip install numpy
```

## Creating Arrays

```python
import numpy as np

# Creating a 1D array
arr1 = np.array([1, 2, 3, 4, 5])

# Creating a 2D array
arr2 = np.array([[1, 2, 3], [4, 5, 6]])

# Creating an array with zeros
zeros = np.zeros((3,3))

# Creating an array with ones
ones = np.ones((2,2))

# Creating an identity matrix
identity = np.eye(3)

# Creating an array with a range of values
range_array = np.arange(0, 10, 2)

# Creating an array with evenly spaced values
linspace_array = np.linspace(0, 10, 5)
```

## Array Properties

```python
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.shape)  # Shape of array
print(arr.ndim)   # Number of dimensions
print(arr.size)   # Total number of elements
print(arr.dtype)  # Data type of array elements
```

## Indexing and Slicing

```python
arr = np.array([10, 20, 30, 40, 50])
print(arr[0])    # First element
print(arr[-1])   # Last element
print(arr[1:4])  # Slicing elements
```

## Mathematical Operations

```python
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Element-wise operations
sum_arr = arr1 + arr2
prod_arr = arr1 * arr2
sqrt_arr = np.sqrt(arr1)
dot_product = np.dot(arr1, arr2)
```

## Broadcasting

```python
arr = np.array([[1, 2, 3], [4, 5, 6]])
scalar = 2
result = arr * scalar  # Broadcasting a scalar value
```

## Aggregation Functions

```python
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.sum())      # Sum of all elements
print(arr.mean())     # Mean of elements
print(arr.max())      # Maximum value
print(arr.min())      # Minimum value
print(arr.std())      # Standard deviation
```

## Reshaping and Transposing

```python
arr = np.array([[1, 2, 3], [4, 5, 6]])
reshaped = arr.reshape((3,2))
transposed = arr.T  # Transpose of the array
```

## Stacking and Splitting

```python
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

stacked = np.vstack((arr1, arr2))  # Vertical stacking
concatenated = np.hstack((arr1, arr2))  # Horizontal stacking

split_arr = np.array([1, 2, 3, 4, 5, 6])
split_result = np.split(split_arr, 3)  # Splitting into equal parts
```

## Random Number Generation

```python
random_array = np.random.rand(3,3)  # Random values between 0 and 1
random_ints = np.random.randint(1, 10, (2,2))  # Random integers
normal_dist = np.random.randn(3,3)  # Normally distributed numbers
```

## Saving and Loading

```python
arr = np.array([1, 2, 3, 4, 5])

# Saving to a file
np.save("array.npy", arr)

# Loading from a file
loaded_arr = np.load("array.npy")
```

## Linear Algebra

```python
matrix = np.array([[1, 2], [3, 4]])
det = np.linalg.det(matrix)  # Determinant
inv = np.linalg.inv(matrix)  # Inverse
eigenvalues, eigenvectors = np.linalg.eig(matrix)  # Eigenvalues and eigenvectors
```

##

